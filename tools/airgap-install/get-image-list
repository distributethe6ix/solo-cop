#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT 

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] version

This script will print out the list of images required for an air-gapped installation of Gloo Mesh Enterprise.
The version argument is required.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # nothing to do
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    flag=0
    param=''

    while :; do
        case "${1-}" in 
        -h | --help) usage ;;
        -v | --verbose) set -x ;;
        --no-color) NO_COLOR=1 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    args=("$@")

    # check required params and arguments
    [[ ${#args[@]} -eq 0 ]] && die "Missing required argument - version"

    return 0
}

parse_params "$@"
setup_colors

VERSION="${args[0]}"

# Script logic
echo "Finding images for Gloo Mesh Enterprise version ${VERSION}"
echo ""
echo "###################################"
echo "# Getting enterprise-agent images #"
echo "###################################"
wget -q https://storage.googleapis.com/gloo-mesh-enterprise/enterprise-agent/enterprise-agent-${VERSION}.tgz
tar zxf enterprise-agent-${VERSION}.tgz
find enterprise-agent -name "values.yaml" | while read file; do 
    cat $file | yq eval -o=json | jq -r '.. | .image? | select(. != null) | (if .registry then (if .registry == "docker.io" then "docker.io/library" else .registry end) + "/" else "" end) + .repository + ":" + (.tag | tostring)'
done | sort -u

echo ""
echo "###################################"
echo "# Getting Gloo Mesh images        #"
echo "###################################"
wget -q https://storage.googleapis.com/gloo-mesh-enterprise/gloo-mesh-enterprise/gloo-mesh-enterprise-${VERSION}.tgz
tar zxf gloo-mesh-enterprise-${VERSION}.tgz
find gloo-mesh-enterprise -name "values.yaml" | while read file; do
    cat $file | yq eval -o=json | jq -r '.. | .image? | select(. != null) | (if .registry then (if .registry == "docker.io" then "docker.io/library" else .registry end) + "/" else "" end) + .repository + ":" + (.tag | tostring)'
done | sort -u

# Cleanup
rm enterprise-agent-${VERSION}.tgz
rm gloo-mesh-enterprise-${VERSION}.tgz
rm -rf enterprise-agent
rm -rf gloo-mesh-enterprise

